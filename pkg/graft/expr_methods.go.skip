package graft

import (
	"fmt"
	"os"
	
	"github.com/geofffranks/yaml"
	"github.com/starkandwayne/goutils/tree"
)

// String returns a string representation of the expression
func (e *Expr) String() string {
	if e == nil {
		return "<nil>"
	}
	
	switch e.Type {
	case Literal:
		if e.Literal == nil {
			return "nil"
		}
		if s, ok := e.Literal.(string); ok {
			return fmt.Sprintf(`"%s"`, s)
		}
		return fmt.Sprintf("%v", e.Literal)
		
	case Reference:
		if e.Reference != nil {
			return e.Reference.String()
		}
		return "<invalid reference>"
		
	case EnvVar:
		return fmt.Sprintf("$%s", e.Name)
		
	case Or:
		return fmt.Sprintf("(%s || %s)", e.Left, e.Right)
		
	case OperatorCall:
		return fmt.Sprintf("(( %s ... ))", e.Name)
		
	default:
		return fmt.Sprintf("<unknown expr type %d>", e.Type)
	}
}

// Dependencies returns the dependencies for this expression
func (e *Expr) Dependencies(ev *Evaluator, locs []*tree.Cursor) []*tree.Cursor {
	if e == nil {
		return []*tree.Cursor{}
	}
	
	l := []*tree.Cursor{}

	canonicalize := func(c *tree.Cursor) {
		cc := c.Copy()
		for cc.Depth() > 0 {
			if _, err := cc.Canonical(ev.Tree); err == nil {
				break
			}
			cc.Pop()
		}
		if cc.Depth() > 0 {
			canon, _ := cc.Canonical(ev.Tree)
			l = append(l, canon)
		}
	}

	switch e.Type {
	case Reference:
		canonicalize(e.Reference)

	case Or:
		if e.Left != nil {
			for _, c := range e.Left.Dependencies(ev, locs) {
				canonicalize(c)
			}
		}
		if e.Right != nil {
			for _, c := range e.Right.Dependencies(ev, locs) {
				canonicalize(c)
			}
		}
	}

	return l
}

// Evaluate evaluates this expression against the given tree
func (e *Expr) Evaluate(tree map[interface{}]interface{}) (interface{}, error) {
	resolved, err := e.Resolve(tree)
	if err != nil {
		return nil, err
	}

	switch resolved.Type {
	case Literal:
		return resolved.Literal, nil
	case EnvVar:
		return os.Getenv(resolved.Name), nil
	case Reference:
		return resolved.Reference.Resolve(tree)
	case Or:
		return nil, fmt.Errorf("expression resolved to a logical OR operation (which shouldn't happen)")
	}
	return nil, fmt.Errorf("unknown operand type: %v", resolved.Type)
}

// Resolve resolves references and environment variables in this expression
func (e *Expr) Resolve(tree map[interface{}]interface{}) (*Expr, error) {
	switch e.Type {
	case Literal:
		return e, nil

	case EnvVar:
		v := os.Getenv(e.Name)
		if v == "" {
			return nil, fmt.Errorf("environment variable $%s is not set", e.Name)
		}

		// Try to parse as YAML
		var val interface{}
		err := yaml.Unmarshal([]byte(v), &val)
		_, isString := val.(string)
		if isString || err != nil {
			return &Expr{Type: Literal, Literal: v}, nil
		}
		return &Expr{Type: Literal, Literal: val}, nil

	case Reference:
		// Resolve environment variables in the reference path
		if e.Reference != nil && e.Reference.Nodes != nil {
			e.Reference.Nodes = resolveEnvInNodes(e.Reference.Nodes)
		}
		if _, err := e.Reference.Resolve(tree); err != nil {
			return nil, fmt.Errorf("unable to resolve `%s`: %s", e.Reference, err)
		}
		return e, nil

	case Or:
		// Try left side first
		if e.Left != nil {
			if resolved, err := e.Left.Resolve(tree); err == nil {
				return resolved, nil
			}
		}
		// Fall back to right side
		if e.Right != nil {
			return e.Right.Resolve(tree)
		}
		return nil, fmt.Errorf("both sides of OR expression failed to resolve")
		
	case OperatorCall:
		// Operator calls cannot be resolved at this stage
		return e, nil
	}
	
	return nil, fmt.Errorf("unknown expression type: %v", e.Type)
}

// resolveEnvInNodes resolves environment variables in path nodes
func resolveEnvInNodes(nodes []string) []string {
	resolved := make([]string, len(nodes))
	for i, node := range nodes {
		if len(node) > 0 && node[0] == '$' {
			resolved[i] = os.Getenv(node[1:])
		} else {
			resolved[i] = node
		}
	}
	return resolved
}