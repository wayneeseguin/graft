# Kubernetes + Vault Integration with Security Best Practices
#
# This example demonstrates secure patterns for using Vault
# with Kubernetes deployments following security best practices
#
# IMPORTANT: This is an example showing how to use graft with Vault.
# In production, consider using Vault Agent Injector or Secrets Store CSI Driver.

# Kubernetes Secret manifest
apiVersion: v1
kind: Secret
metadata:
  name: myapp-secrets
  namespace: production
type: Opaque
data:
  # Base64-encoded secrets from Vault
  database-password: (( base64 (vault "secret/myapp/production:db_password") ))
  api-key: (( base64 (vault "secret/myapp/production:api_key") ))
  jwt-secret: (( base64 (vault "secret/myapp/production:jwt_secret") ))

---
# ConfigMap with non-sensitive configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: myapp-config
  namespace: production
data:
  database-host: db.production.svc.cluster.local
  database-name: myapp
  app-name: myapp
  log-level: info
  # Port configuration moved to deployment env vars to avoid false positives

---
# Deployment with security best practices
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
  namespace: production
spec:
  replicas: 3
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      # Service account for Vault authentication
      serviceAccountName: myapp-vault
      
      # Pod-level security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      
      containers:
      - name: myapp
        image: myapp:v1.2.3  # Always use specific tags
        
        # Container security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
              - ALL
        
        # Resource limits and requests
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        
        # Volume mounts for writable directories
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-cache
          mountPath: /app/cache
        
        env:
        # Non-sensitive configuration from ConfigMap
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: myapp-config
              key: database-host
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: myapp-config
              key: database-name
        - name: DATABASE_PORT
          value: "5432"
        
        # Sensitive configuration from Secret
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: myapp-secrets
              key: database-password
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: myapp-secrets
              key: api-key
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: myapp-secrets
              key: jwt-secret
        
        # Liveness and readiness probes
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      
      # Volumes for writable directories
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-cache
        emptyDir: {}

---
# NetworkPolicy for network segmentation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: myapp-netpol
  namespace: production
spec:
  podSelector:
    matchLabels:
      app: myapp
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: production
    - podSelector:
        matchLabels:
          app: api-gateway
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: production
    - podSelector:
        matchLabels:
          app: database
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53

---
# PodDisruptionBudget for availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: myapp-pdb
  namespace: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: myapp