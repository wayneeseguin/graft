# Default Values with Null Operator
#
# Using null checks to provide default values for missing configuration

# Application defaults
app_config:
  # User-provided config (some values might be null/empty)
  provided:
    name: "MyApp"
    version: ""
    environment: null
    port: 8080
    host: ""
    timeout: null
    max_connections: 100
    log_level: ""
    features:
      analytics: true
      caching: null
      compression: false
  
  # Default values
  defaults:
    name: "DefaultApp"
    version: "0.0.1"
    environment: "development"
    port: 3000
    host: "localhost"
    timeout: 30
    max_connections: 50
    log_level: "info"
    features:
      analytics: false
      caching: true
      compression: true
  
  # Final configuration with defaults
  final:
    name: (( null app_config.provided.name ? app_config.defaults.name : app_config.provided.name ))
    # Result: "MyApp"
    
    version: (( null app_config.provided.version ? app_config.defaults.version : app_config.provided.version ))
    # Result: "0.0.1" (empty string is null)
    
    environment: (( null app_config.provided.environment ? app_config.defaults.environment : app_config.provided.environment ))
    # Result: "development" (null value)
    
    port: (( null app_config.provided.port ? app_config.defaults.port : app_config.provided.port ))
    # Result: 8080 (not null)
    
    host: (( null app_config.provided.host ? app_config.defaults.host : app_config.provided.host ))
    # Result: "localhost" (empty string)
    
    timeout: (( null app_config.provided.timeout ? app_config.defaults.timeout : app_config.provided.timeout ))
    # Result: 30 (null value)
    
    max_connections: (( null app_config.provided.max_connections ? app_config.defaults.max_connections : app_config.provided.max_connections ))
    # Result: 100 (not null)
    
    log_level: (( null app_config.provided.log_level ? app_config.defaults.log_level : app_config.provided.log_level ))
    # Result: "info" (empty string)
    
    features:
      analytics: (( null app_config.provided.features.analytics ? app_config.defaults.features.analytics : app_config.provided.features.analytics ))
      # Result: true
      
      caching: (( null app_config.provided.features.caching ? app_config.defaults.features.caching : app_config.provided.features.caching ))
      # Result: true (null value gets default)
      
      compression: (( null app_config.provided.features.compression ? app_config.defaults.features.compression : app_config.provided.features.compression ))
      # Result: false (provided value, even though false)

# Database configuration with defaults
database_config:
  # Partial user configuration
  user_config:
    host: "db.example.com"
    port: null
    username: "appuser"
    password: ""
    database: "myapp"
    options:
      ssl: true
      pool_size: null
      timeout: ""
  
  # System defaults
  defaults:
    host: "localhost"
    port: 5432
    username: "postgres"
    password: "postgres"
    database: "postgres"
    options:
      ssl: false
      pool_size: 10
      timeout: "30s"
      charset: "utf8"
      timezone: "UTC"
  
  # Merged configuration
  connection:
    host: (( null database_config.user_config.host ? database_config.defaults.host : database_config.user_config.host ))
    port: (( null database_config.user_config.port ? database_config.defaults.port : database_config.user_config.port ))
    username: (( null database_config.user_config.username ? database_config.defaults.username : database_config.user_config.username ))
    password: (( null database_config.user_config.password ? database_config.defaults.password : database_config.user_config.password ))
    database: (( null database_config.user_config.database ? database_config.defaults.database : database_config.user_config.database ))
    
    # Options with nested defaults
    options:
      ssl: (( null database_config.user_config.options.ssl ? database_config.defaults.options.ssl : database_config.user_config.options.ssl ))
      pool_size: (( null database_config.user_config.options.pool_size ? database_config.defaults.options.pool_size : database_config.user_config.options.pool_size ))
      timeout: (( null database_config.user_config.options.timeout ? database_config.defaults.options.timeout : database_config.user_config.options.timeout ))
      # User didn't provide these at all - use defaults
      charset: (( null database_config.user_config.options.charset ? database_config.defaults.options.charset : database_config.user_config.options.charset ))
      timezone: (( null database_config.user_config.options.timezone ? database_config.defaults.options.timezone : database_config.user_config.options.timezone ))

# Cloud provider configuration
cloud_config:
  # User might provide partial config
  provided:
    provider: "aws"
    region: ""
    credentials:
      access_key: null
      secret_key: null
    instance:
      type: "t3.medium"
      ami: ""
      security_groups: []
      subnet: null
  
  # Environment-based defaults
  environment: "production"
  
  defaults:
    development:
      region: "us-west-2"
      instance:
        type: "t3.micro"
        ami: "ami-dev12345"
        security_groups: ["sg-dev"]
        subnet: "subnet-dev"
    
    production:
      region: "us-east-1"
      instance:
        type: "t3.large"
        ami: "ami-prod12345"
        security_groups: ["sg-prod-web", "sg-prod-app"]
        subnet: "subnet-prod"
  
  # Get defaults for current environment
  env_defaults: (( grab cloud_config.defaults.[cloud_config.environment] ))
  
  # Final configuration
  final:
    provider: (( cloud_config.provided.provider ))  # Always use provided
    region: (( null cloud_config.provided.region ? cloud_config.env_defaults.region : cloud_config.provided.region ))
    
    credentials:
      # Use environment variables if not provided
      access_key: (( null cloud_config.provided.credentials.access_key ? "$AWS_ACCESS_KEY_ID" : cloud_config.provided.credentials.access_key ))
      secret_key: (( null cloud_config.provided.credentials.secret_key ? "$AWS_SECRET_ACCESS_KEY" : cloud_config.provided.credentials.secret_key ))
    
    instance:
      type: (( null cloud_config.provided.instance.type ? cloud_config.env_defaults.instance.type : cloud_config.provided.instance.type ))
      ami: (( null cloud_config.provided.instance.ami ? cloud_config.env_defaults.instance.ami : cloud_config.provided.instance.ami ))
      security_groups: (( null cloud_config.provided.instance.security_groups || cloud_config.provided.instance.security_groups == [] ? cloud_config.env_defaults.instance.security_groups : cloud_config.provided.instance.security_groups ))
      subnet: (( null cloud_config.provided.instance.subnet ? cloud_config.env_defaults.instance.subnet : cloud_config.provided.instance.subnet ))

# Service endpoints with fallbacks
services:
  # User configuration (might be incomplete)
  configured:
    api:
      url: "https://api.example.com"
      timeout: null
    auth:
      url: ""
      timeout: 10
    metrics:
      # Completely missing
  
  # Default service configurations
  defaults:
    api:
      url: "http://localhost:8080"
      timeout: 30
      retry: 3
    auth:
      url: "http://localhost:8081"
      timeout: 20
      retry: 2
    metrics:
      url: "http://localhost:9090"
      timeout: 5
      retry: 1
  
  # Build final service map
  endpoints:
    api:
      url: (( null services.configured.api.url ? services.defaults.api.url : services.configured.api.url ))
      timeout: (( null services.configured.api.timeout ? services.defaults.api.timeout : services.configured.api.timeout ))
      retry: (( null services.configured.api.retry ? services.defaults.api.retry : services.configured.api.retry ))
    
    auth:
      url: (( null services.configured.auth.url ? services.defaults.auth.url : services.configured.auth.url ))
      timeout: (( null services.configured.auth.timeout ? services.defaults.auth.timeout : services.configured.auth.timeout ))
      retry: (( null services.configured.auth.retry ? services.defaults.auth.retry : services.configured.auth.retry ))
    
    metrics:
      url: (( null services.configured.metrics.url ? services.defaults.metrics.url : services.configured.metrics.url ))
      timeout: (( null services.configured.metrics.timeout ? services.defaults.metrics.timeout : services.configured.metrics.timeout ))
      retry: (( null services.configured.metrics.retry ? services.defaults.metrics.retry : services.configured.metrics.retry ))

# List defaults with null checking
list_configs:
  # User might provide partial lists
  user_lists:
    allowed_origins: ["https://app.example.com"]
    blocked_ips: []
    rate_limits: null
    feature_flags: ["feature1", "feature2"]
  
  # Default lists
  default_lists:
    allowed_origins: ["http://localhost:3000", "http://localhost:8080"]
    blocked_ips: ["0.0.0.0", "255.255.255.255"]
    rate_limits: [100, 1000, 10000]
    feature_flags: ["basic", "standard"]
  
  # Merge lists with defaults
  final_lists:
    # Use user list if not empty, otherwise defaults
    allowed_origins: (( null user_lists.allowed_origins || user_lists.allowed_origins == [] ? default_lists.allowed_origins : user_lists.allowed_origins ))
    
    # Empty array - use defaults
    blocked_ips: (( null user_lists.blocked_ips || user_lists.blocked_ips == [] ? default_lists.blocked_ips : user_lists.blocked_ips ))
    
    # Null - use defaults
    rate_limits: (( null user_lists.rate_limits ? default_lists.rate_limits : user_lists.rate_limits ))
    
    # Merge user and default flags
    feature_flags: (( concat user_lists.feature_flags default_lists.feature_flags ))

# Complex nested defaults
nested_config:
  # Sparse user configuration
  user:
    server:
      http:
        port: 8080
      https:
        # Missing entirely
    client:
      timeout: null
      retries: 3
    logging:
      level: ""
      outputs: []
  
  # Complete defaults
  defaults:
    server:
      http:
        port: 80
        host: "0.0.0.0"
      https:
        port: 443
        host: "0.0.0.0"
        cert: "/etc/ssl/cert.pem"
        key: "/etc/ssl/key.pem"
    client:
      timeout: 30
      retries: 5
      backoff: "exponential"
    logging:
      level: "info"
      outputs: ["stdout", "file"]
      format: "json"
  
  # Build complete configuration
  complete:
    server:
      http:
        port: (( null nested_config.user.server.http.port ? nested_config.defaults.server.http.port : nested_config.user.server.http.port ))
        host: (( null nested_config.user.server.http.host ? nested_config.defaults.server.http.host : nested_config.user.server.http.host ))
      https:
        port: (( null nested_config.user.server.https.port ? nested_config.defaults.server.https.port : nested_config.user.server.https.port ))
        host: (( null nested_config.user.server.https.host ? nested_config.defaults.server.https.host : nested_config.user.server.https.host ))
        cert: (( null nested_config.user.server.https.cert ? nested_config.defaults.server.https.cert : nested_config.user.server.https.cert ))
        key: (( null nested_config.user.server.https.key ? nested_config.defaults.server.https.key : nested_config.user.server.https.key ))
    client:
      timeout: (( null nested_config.user.client.timeout ? nested_config.defaults.client.timeout : nested_config.user.client.timeout ))
      retries: (( null nested_config.user.client.retries ? nested_config.defaults.client.retries : nested_config.user.client.retries ))
      backoff: (( null nested_config.user.client.backoff ? nested_config.defaults.client.backoff : nested_config.user.client.backoff ))
    logging:
      level: (( null nested_config.user.logging.level ? nested_config.defaults.logging.level : nested_config.user.logging.level ))
      outputs: (( null nested_config.user.logging.outputs || nested_config.user.logging.outputs == [] ? nested_config.defaults.logging.outputs : nested_config.user.logging.outputs ))
      format: (( null nested_config.user.logging.format ? nested_config.defaults.logging.format : nested_config.user.logging.format ))