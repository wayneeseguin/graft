# Threshold Checks with Comparison Operators
#
# Using comparison operators for monitoring and alerting thresholds

# System monitoring thresholds
monitoring:
  # Current system metrics
  current_metrics:
    cpu:
      usage_percent: 78
      temperature_celsius: 72
      load_average: 3.2
    
    memory:
      used_gb: 28
      total_gb: 32
      swap_used_gb: 2
      swap_total_gb: 8
    
    disk:
      used_gb: 450
      total_gb: 500
      iops: 5500
      latency_ms: 12
    
    network:
      bandwidth_mbps: 850
      packet_loss_percent: 0.1
      connections: 1500
      latency_ms: 45
  
  # Threshold definitions
  thresholds:
    cpu:
      usage_warning: 70
      usage_critical: 90
      temperature_warning: 75
      temperature_critical: 85
      load_warning: 4.0
      load_critical: 8.0
    
    memory:
      percent_warning: 80
      percent_critical: 95
      swap_warning: 4
      swap_critical: 6
    
    disk:
      percent_warning: 85
      percent_critical: 95
      iops_warning: 5000
      iops_critical: 8000
      latency_warning: 20
      latency_critical: 50
    
    network:
      bandwidth_warning: 800
      bandwidth_critical: 950
      packet_loss_warning: 0.5
      packet_loss_critical: 1.0
      connections_warning: 2000
      connections_critical: 3000
  
  # Calculated values
  calculated:
    memory_percent: (( (monitoring.current_metrics.memory.used_gb / monitoring.current_metrics.memory.total_gb) * 100 ))
    # Result: 87.5
    
    disk_percent: (( (monitoring.current_metrics.disk.used_gb / monitoring.current_metrics.disk.total_gb) * 100 ))
    # Result: 90
  
  # Threshold checks
  alerts:
    cpu:
      usage_alert: (( 
        monitoring.current_metrics.cpu.usage_percent >= monitoring.thresholds.cpu.usage_critical ? "critical" :
        monitoring.current_metrics.cpu.usage_percent >= monitoring.thresholds.cpu.usage_warning ? "warning" :
        "ok"
      ))
      # Result: "warning" (78 >= 70 but < 90)
      
      temperature_alert: (( 
        monitoring.current_metrics.cpu.temperature_celsius >= monitoring.thresholds.cpu.temperature_critical ? "critical" :
        monitoring.current_metrics.cpu.temperature_celsius >= monitoring.thresholds.cpu.temperature_warning ? "warning" :
        "ok"
      ))
      # Result: "ok" (72 < 75)
      
      load_alert: (( 
        monitoring.current_metrics.cpu.load_average >= monitoring.thresholds.cpu.load_critical ? "critical" :
        monitoring.current_metrics.cpu.load_average >= monitoring.thresholds.cpu.load_warning ? "warning" :
        "ok"
      ))
      # Result: "ok" (3.2 < 4.0)
    
    memory:
      usage_alert: (( 
        monitoring.calculated.memory_percent >= monitoring.thresholds.memory.percent_critical ? "critical" :
        monitoring.calculated.memory_percent >= monitoring.thresholds.memory.percent_warning ? "warning" :
        "ok"
      ))
      # Result: "warning" (87.5 >= 80 but < 95)
      
      swap_alert: (( 
        monitoring.current_metrics.memory.swap_used_gb >= monitoring.thresholds.memory.swap_critical ? "critical" :
        monitoring.current_metrics.memory.swap_used_gb >= monitoring.thresholds.memory.swap_warning ? "warning" :
        "ok"
      ))
      # Result: "ok" (2 < 4)
    
    disk:
      usage_alert: (( 
        monitoring.calculated.disk_percent >= monitoring.thresholds.disk.percent_critical ? "critical" :
        monitoring.calculated.disk_percent >= monitoring.thresholds.disk.percent_warning ? "warning" :
        "ok"
      ))
      # Result: "warning" (90 >= 85 but < 95)
      
      iops_alert: (( 
        monitoring.current_metrics.disk.iops >= monitoring.thresholds.disk.iops_critical ? "critical" :
        monitoring.current_metrics.disk.iops >= monitoring.thresholds.disk.iops_warning ? "warning" :
        "ok"
      ))
      # Result: "warning" (5500 >= 5000 but < 8000)
      
      latency_alert: (( 
        monitoring.current_metrics.disk.latency_ms >= monitoring.thresholds.disk.latency_critical ? "critical" :
        monitoring.current_metrics.disk.latency_ms >= monitoring.thresholds.disk.latency_warning ? "warning" :
        "ok"
      ))
      # Result: "ok" (12 < 20)
    
    network:
      bandwidth_alert: (( 
        monitoring.current_metrics.network.bandwidth_mbps >= monitoring.thresholds.network.bandwidth_critical ? "critical" :
        monitoring.current_metrics.network.bandwidth_mbps >= monitoring.thresholds.network.bandwidth_warning ? "warning" :
        "ok"
      ))
      # Result: "warning" (850 >= 800 but < 950)
      
      packet_loss_alert: (( 
        monitoring.current_metrics.network.packet_loss_percent >= monitoring.thresholds.network.packet_loss_critical ? "critical" :
        monitoring.current_metrics.network.packet_loss_percent >= monitoring.thresholds.network.packet_loss_warning ? "warning" :
        "ok"
      ))
      # Result: "ok" (0.1 < 0.5)
      
      connections_alert: (( 
        monitoring.current_metrics.network.connections >= monitoring.thresholds.network.connections_critical ? "critical" :
        monitoring.current_metrics.network.connections >= monitoring.thresholds.network.connections_warning ? "warning" :
        "ok"
      ))
      # Result: "ok" (1500 < 2000)
  
  # Summary
  summary:
    has_critical_alerts: (( 
      monitoring.alerts.cpu.usage_alert == "critical" ||
      monitoring.alerts.cpu.temperature_alert == "critical" ||
      monitoring.alerts.memory.usage_alert == "critical" ||
      monitoring.alerts.disk.usage_alert == "critical" ||
      monitoring.alerts.network.bandwidth_alert == "critical"
    ))
    # Result: false
    
    has_warnings: (( 
      monitoring.alerts.cpu.usage_alert == "warning" ||
      monitoring.alerts.memory.usage_alert == "warning" ||
      monitoring.alerts.disk.usage_alert == "warning" ||
      monitoring.alerts.network.bandwidth_alert == "warning"
    ))
    # Result: true
    
    system_health: (( 
      monitoring.summary.has_critical_alerts ? "critical" :
      monitoring.summary.has_warnings ? "warning" :
      "healthy"
    ))
    # Result: "warning"

# Application performance thresholds
application:
  # Current metrics
  metrics:
    response_time_ms: 450
    error_rate_percent: 2.5
    requests_per_second: 1200
    queue_depth: 150
    active_connections: 800
    cache_hit_rate: 0.92
  
  # SLA thresholds
  sla:
    response_time:
      target: 200
      warning: 500
      critical: 1000
    
    error_rate:
      target: 0.1
      warning: 1.0
      critical: 5.0
    
    availability:
      target: 99.99
      warning: 99.9
      critical: 99.0
  
  # Performance checks
  performance:
    response_time_status: (( 
      application.metrics.response_time_ms > application.sla.response_time.critical ? "sla_breach" :
      application.metrics.response_time_ms > application.sla.response_time.warning ? "degraded" :
      application.metrics.response_time_ms > application.sla.response_time.target ? "acceptable" :
      "optimal"
    ))
    # Result: "acceptable" (450 > 200 but <= 500)
    
    error_rate_status: (( 
      application.metrics.error_rate_percent > application.sla.error_rate.critical ? "sla_breach" :
      application.metrics.error_rate_percent > application.sla.error_rate.warning ? "degraded" :
      application.metrics.error_rate_percent > application.sla.error_rate.target ? "acceptable" :
      "optimal"
    ))
    # Result: "degraded" (2.5 > 1.0 but <= 5.0)
    
    meeting_sla: (( 
      application.performance.response_time_status != "sla_breach" &&
      application.performance.error_rate_status != "sla_breach"
    ))
    # Result: true
  
  # Capacity thresholds
  capacity:
    thresholds:
      rps_warning: 1500
      rps_critical: 2000
      connections_warning: 900
      connections_critical: 1000
      queue_warning: 200
      queue_critical: 500
    
    checks:
      rps_status: (( 
        application.metrics.requests_per_second >= application.capacity.thresholds.rps_critical ? "overload" :
        application.metrics.requests_per_second >= application.capacity.thresholds.rps_warning ? "high" :
        "normal"
      ))
      # Result: "normal" (1200 < 1500)
      
      connection_status: (( 
        application.metrics.active_connections >= application.capacity.thresholds.connections_critical ? "exhausted" :
        application.metrics.active_connections >= application.capacity.thresholds.connections_warning ? "near_limit" :
        "healthy"
      ))
      # Result: "healthy" (800 < 900)
      
      queue_status: (( 
        application.metrics.queue_depth >= application.capacity.thresholds.queue_critical ? "backed_up" :
        application.metrics.queue_depth >= application.capacity.thresholds.queue_warning ? "growing" :
        "normal"
      ))
      # Result: "normal" (150 < 200)
    
    needs_scaling: (( 
      application.capacity.checks.rps_status != "normal" ||
      application.capacity.checks.connection_status != "healthy" ||
      application.capacity.checks.queue_status != "normal"
    ))
    # Result: false

# Cost thresholds
cost_management:
  # Current spending
  current:
    daily_spend: 450
    monthly_spend: 12500
    compute_cost: 8000
    storage_cost: 2500
    network_cost: 2000
  
  # Budget limits
  budgets:
    daily:
      warning: 400
      critical: 500
      max: 600
    
    monthly:
      warning: 10000
      critical: 15000
      max: 20000
    
    service_limits:
      compute: 10000
      storage: 3000
      network: 3000
  
  # Cost alerts
  alerts:
    daily_status: (( 
      cost_management.current.daily_spend >= cost_management.budgets.daily.max ? "exceeded" :
      cost_management.current.daily_spend >= cost_management.budgets.daily.critical ? "critical" :
      cost_management.current.daily_spend >= cost_management.budgets.daily.warning ? "warning" :
      "ok"
    ))
    # Result: "warning" (450 >= 400 but < 500)
    
    monthly_status: (( 
      cost_management.current.monthly_spend >= cost_management.budgets.monthly.max ? "exceeded" :
      cost_management.current.monthly_spend >= cost_management.budgets.monthly.critical ? "critical" :
      cost_management.current.monthly_spend >= cost_management.budgets.monthly.warning ? "warning" :
      "ok"
    ))
    # Result: "warning" (12500 >= 10000 but < 15000)
    
    compute_over_budget: (( cost_management.current.compute_cost > cost_management.budgets.service_limits.compute ))
    # Result: false (8000 <= 10000)
    
    storage_over_budget: (( cost_management.current.storage_cost > cost_management.budgets.service_limits.storage ))
    # Result: false (2500 <= 3000)
    
    network_over_budget: (( cost_management.current.network_cost > cost_management.budgets.service_limits.network ))
    # Result: false (2000 <= 3000)
    
    any_service_over_budget: (( 
      cost_management.alerts.compute_over_budget ||
      cost_management.alerts.storage_over_budget ||
      cost_management.alerts.network_over_budget
    ))
    # Result: false
  
  # Projections
  projections:
    days_in_month: 30
    current_day: 15
    
    projected_monthly: (( (cost_management.current.monthly_spend / cost_management.projections.current_day) * cost_management.projections.days_in_month ))
    # Result: 25000
    
    will_exceed_budget: (( cost_management.projections.projected_monthly > cost_management.budgets.monthly.max ))
    # Result: true (25000 > 20000)

# Security thresholds
security:
  # Security metrics
  metrics:
    failed_login_attempts: 25
    suspicious_requests: 150
    blocked_ips: 45
    ssl_cert_days_remaining: 25
    password_age_days: 85
    mfa_adoption_percent: 65
  
  # Security thresholds
  thresholds:
    failed_logins:
      warning: 20
      critical: 50
    
    suspicious_requests:
      warning: 100
      critical: 500
    
    blocked_ips:
      warning: 50
      critical: 100
    
    ssl_cert_expiry:
      warning: 30
      critical: 7
    
    password_rotation:
      warning: 60
      critical: 90
    
    mfa_adoption:
      target: 100
      acceptable: 80
      minimum: 50
  
  # Security checks
  alerts:
    login_attempts: (( 
      security.metrics.failed_login_attempts >= security.thresholds.failed_logins.critical ? "attack_likely" :
      security.metrics.failed_login_attempts >= security.thresholds.failed_logins.warning ? "suspicious" :
      "normal"
    ))
    # Result: "suspicious" (25 >= 20 but < 50)
    
    request_analysis: (( 
      security.metrics.suspicious_requests >= security.thresholds.suspicious_requests.critical ? "under_attack" :
      security.metrics.suspicious_requests >= security.thresholds.suspicious_requests.warning ? "elevated_risk" :
      "normal"
    ))
    # Result: "elevated_risk" (150 >= 100 but < 500)
    
    ssl_status: (( 
      security.metrics.ssl_cert_days_remaining <= security.thresholds.ssl_cert_expiry.critical ? "urgent" :
      security.metrics.ssl_cert_days_remaining <= security.thresholds.ssl_cert_expiry.warning ? "renew_soon" :
      "ok"
    ))
    # Result: "renew_soon" (25 <= 30 but > 7)
    
    password_policy: (( 
      security.metrics.password_age_days >= security.thresholds.password_rotation.critical ? "expired" :
      security.metrics.password_age_days >= security.thresholds.password_rotation.warning ? "expiring_soon" :
      "compliant"
    ))
    # Result: "expiring_soon" (85 >= 60 but < 90)
    
    mfa_compliance: (( 
      security.metrics.mfa_adoption_percent >= security.thresholds.mfa_adoption.target ? "excellent" :
      security.metrics.mfa_adoption_percent >= security.thresholds.mfa_adoption.acceptable ? "good" :
      security.metrics.mfa_adoption_percent >= security.thresholds.mfa_adoption.minimum ? "needs_improvement" :
      "critical"
    ))
    # Result: "needs_improvement" (65 >= 50 but < 80)
  
  # Overall security posture
  security_score:
    # Calculate a simple security score
    components:
      login_score: (( security.alerts.login_attempts == "normal" ? 100 : security.alerts.login_attempts == "suspicious" ? 50 : 0 ))
      request_score: (( security.alerts.request_analysis == "normal" ? 100 : security.alerts.request_analysis == "elevated_risk" ? 50 : 0 ))
      ssl_score: (( security.alerts.ssl_status == "ok" ? 100 : security.alerts.ssl_status == "renew_soon" ? 50 : 0 ))
      password_score: (( security.alerts.password_policy == "compliant" ? 100 : security.alerts.password_policy == "expiring_soon" ? 50 : 0 ))
      mfa_score: (( security.metrics.mfa_adoption_percent ))
    
    overall: (( (
      security_score.components.login_score +
      security_score.components.request_score +
      security_score.components.ssl_score +
      security_score.components.password_score +
      security_score.components.mfa_score
    ) / 5 ))
    # Result: 53 (average of all component scores)
    
    grade: (( 
      security_score.overall >= 90 ? "A" :
      security_score.overall >= 80 ? "B" :
      security_score.overall >= 70 ? "C" :
      security_score.overall >= 60 ? "D" :
      "F"
    ))
    # Result: "F" (53 < 60)