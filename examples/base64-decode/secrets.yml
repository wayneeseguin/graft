# Decoding Secrets with Base64-Decode
#
# Examples of decoding encoded secrets and credentials

# Database credentials
database_secrets:
  # Encoded credentials from external source
  encoded:
    host: "ZGIucHJvZC5leGFtcGxlLmNvbQ=="
    port: "NTQzMg=="
    username: "YXBwX3VzZXJfcHJvZA=="
    password: "U3VwM3JTM2NyM3QhUEBzc3cwcmQ="
    database: "bXlhcHBfcHJvZHVjdGlvbg=="
  
  # Decoded for use
  connection:
    host: (( base64-decode database_secrets.encoded.host ))
    # Result: "db.prod.example.com"
    port: (( base64-decode database_secrets.encoded.port ))
    # Result: "5432"
    username: (( base64-decode database_secrets.encoded.username ))
    # Result: "app_user_prod"
    password: (( base64-decode database_secrets.encoded.password ))
    # Result: "Sup3rS3cr3t!P@ssw0rd"
    database: (( base64-decode database_secrets.encoded.database ))
    # Result: "myapp_production"
  
  # Build connection string
  connection_string: (( concat 
    "postgresql://" 
    database_secrets.connection.username 
    ":" 
    database_secrets.connection.password 
    "@" 
    database_secrets.connection.host 
    ":" 
    database_secrets.connection.port 
    "/" 
    database_secrets.connection.database 
  ))

# API credentials
api_secrets:
  # Various API keys (encoded)
  encoded_keys:
    stripe: "c2tfdGVzdF80ZUMyX0FiQ2RFZkdoSWpLbE1uT3BRclN0VXZXeHl6"
    sendgrid: "U0cuYWJjZGVmZ2hpams0ZUMyLkFiQ2RFZkdoSWpLbE1uT3BRclN0VXZXeHl6"
    twilio: "QUNhYmNkZWZnaGlqazEyMzQ1Njc4OTA="
    datadog: "ZGRfYXBpX2tleV9hYmNkZWZnaGlqa2xtbm9wcXJz"
  
  # Decoded API keys
  api_keys:
    stripe: (( base64-decode api_secrets.encoded_keys.stripe ))
    # Result: "sk_test_4eC2_AbCdEfGhIjKlMnOpQrStUvWxyz"
    sendgrid: (( base64-decode api_secrets.encoded_keys.sendgrid ))
    # Result: "SG.abcdefghijk4eC2.AbCdEfGhIjKlMnOpQrStUvWxyz"
    twilio: (( base64-decode api_secrets.encoded_keys.twilio ))
    # Result: "ACabcdefghijk1234567890"
    datadog: (( base64-decode api_secrets.encoded_keys.datadog ))
    # Result: "dd_api_key_abcdefghijklmnopqrs"

# OAuth credentials
oauth_secrets:
  # Encoded OAuth configuration
  github:
    encoded_client_id: "Z2hfY2xpZW50X2lkXzEyMzQ1Njc4OTA="
    encoded_client_secret: "Z2hfY2xpZW50X3NlY3JldF9hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eg=="
    encoded_redirect_uri: "aHR0cHM6Ly9hcHAuZXhhbXBsZS5jb20vYXV0aC9naXRodWIvY2FsbGJhY2s="
  
  # Decoded OAuth config
  github_config:
    client_id: (( base64-decode oauth_secrets.github.encoded_client_id ))
    # Result: "gh_client_id_1234567890"
    client_secret: (( base64-decode oauth_secrets.github.encoded_client_secret ))
    # Result: "gh_client_secret_abcdefghijklmnopqrstuvwxyz"
    redirect_uri: (( base64-decode oauth_secrets.github.encoded_redirect_uri ))
    # Result: "https://app.example.com/auth/github/callback"

# JWT secrets
jwt_secrets:
  # Encoded JWT components
  encoded:
    # RS256 private key (truncated for example)
    private_key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdTN5c3M0NXh5ejNSZnVFCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"
    # HS256 secret
    hmac_secret: "bXlfc3VwZXJfc2VjcmV0X2htYWNfa2V5X2Zvcl9qd3RfdG9rZW5z"
    # JWT issuer
    issuer: "aHR0cHM6Ly9hdXRoLmV4YW1wbGUuY29t"
  
  # Decoded JWT configuration
  jwt_config:
    private_key: (( base64-decode jwt_secrets.encoded.private_key ))
    # Result: |
    #   -----BEGIN RSA PRIVATE KEY-----
    #   MIIEowIBAAKCAQEAu3yss45xyz3RfuE
    #   -----END RSA PRIVATE KEY-----
    hmac_secret: (( base64-decode jwt_secrets.encoded.hmac_secret ))
    # Result: "my_super_secret_hmac_key_for_jwt_tokens"
    issuer: (( base64-decode jwt_secrets.encoded.issuer ))
    # Result: "https://auth.example.com"

# Environment-specific secrets
environment_secrets:
  # Encoded per environment
  production:
    db_password: "UHIwZHVjdDEwbl9QYXNzdzByZCE="
    encryption_key: "YWVzMjU2X3Byb2RfZW5jcnlwdGlvbl9rZXlfMzJieXRlcw=="
    master_key: "bWFzdGVyX2tleV9mb3JfcHJvZHVjdGlvbl9lbnZpcm9ubWVudA=="
  
  staging:
    db_password: "U3RhZzFuZ19QYXNzdzByZA=="
    encryption_key: "YWVzMjU2X3N0YWdpbmdfZW5jcnlwdGlvbl9rZXlfMzJieXRlcw=="
    master_key: "bWFzdGVyX2tleV9mb3Jfc3RhZ2luZ19lbnZpcm9ubWVudA=="
  
  # Current environment
  current_env: production
  
  # Decoded secrets for current environment
  active_secrets:
    db_password: (( base64-decode (grab environment_secrets.[environment_secrets.current_env].db_password) ))
    encryption_key: (( base64-decode (grab environment_secrets.[environment_secrets.current_env].encryption_key) ))
    master_key: (( base64-decode (grab environment_secrets.[environment_secrets.current_env].master_key) ))

# Kubernetes secrets format
k8s_secrets:
  # Typical K8s secret data (base64 encoded)
  data:
    username: "YWRtaW4="
    password: "MWYyZDFlMmU2N2Rm"
    ".dockerconfigjson": "eyJhdXRocyI6eyJkb2NrZXIuaW8iOnsidXNlcm5hbWUiOiJteXVzZXIiLCJwYXNzd29yZCI6Im15cGFzcyIsImVtYWlsIjoibXlAZW1haWwuY29tIiwiYXV0aCI6ImJYbDFjMlZ5T20xNWNHRnpjdz09In19fQ=="
  
  # Decoded for verification
  decoded:
    username: (( base64-decode k8s_secrets.data.username ))
    # Result: "admin"
    password: (( base64-decode k8s_secrets.data.password ))
    # Result: "1f2d1e2e67df"
    docker_config: (( base64-decode k8s_secrets.data.".dockerconfigjson" ))
    # Result: JSON docker config

# Cloud provider secrets
cloud_secrets:
  # AWS credentials (encoded)
  aws:
    encoded_access_key: "QUtJQUlPU0ZPRE5ON0VYQU1QTEU="
    encoded_secret_key: "d0phbHJYVXRuRkVNSS9LN01ERU5HL2JQeFJmaUNZRVhBTVBMRUtFWQ=="
    encoded_session_token: "RndJb2R6WUl2QUFEQUJBZ0l3..."
  
  # GCP service account (encoded JSON)
  gcp:
    encoded_service_account: "ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAibXktcHJvamVjdCIsCiAgInByaXZhdGVfa2V5X2lkIjogImFiY2RlZjEyMzQ1NiIKfQ=="
  
  # Decoded cloud credentials
  aws_credentials:
    access_key_id: (( base64-decode cloud_secrets.aws.encoded_access_key ))
    # Result: "AKIAIOSFODNN7EXAMPLE"
    secret_access_key: (( base64-decode cloud_secrets.aws.encoded_secret_key ))
    # Result: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
    session_token: (( base64-decode cloud_secrets.aws.encoded_session_token ))
  
  gcp_credentials:
    service_account: (( base64-decode cloud_secrets.gcp.encoded_service_account ))
    # Result: |
    #   {
    #     "type": "service_account",
    #     "project_id": "my-project",
    #     "private_key_id": "abcdef123456"
    #   }

# Encryption keys and certificates
encryption_secrets:
  # Encoded keys
  keys:
    aes_key: "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3OA=="
    rsa_public: "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzkKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t"
    ed25519_private: "LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVQ=="
  
  # Decoded keys
  decoded_keys:
    aes_key: (( base64-decode encryption_secrets.keys.aes_key ))
    # Result: "abcdefghijklmnopqrstuvwxyz12345678" (32 bytes for AES-256)
    rsa_public: (( base64-decode encryption_secrets.keys.rsa_public ))
    # Result: |
    #   -----BEGIN PUBLIC KEY-----
    #   MIIBIjANBgkqhkiG9
    #   -----END PUBLIC KEY-----
    ed25519_private: (( base64-decode encryption_secrets.keys.ed25519_private ))
    # Result: |
    #   -----BEGIN OPENSSH PRIVATE KEY-----
    #   b3BlbnNzaC1rZXktdjEAAAAABG5vbmU=
    #   -----END OPENSSH PRIVATE KEY-----

# Combined with other operators
combined_operations:
  # Decode from vault
  from_vault:
    encoded_in_vault: (( vault "secret/encoded:password" ))  # Returns base64
    decoded_password: (( base64-decode combined_operations.from_vault.encoded_in_vault ))
  
  # Decode from AWS parameter
  from_aws:
    encoded_param: (( awsparam "/myapp/encoded_secret" ))  # Returns base64
    decoded_secret: (( base64-decode combined_operations.from_aws.encoded_param ))
  
  # Chain operations
  complex:
    # Grab encoded value, decode it, then use it
    encoded_ref: "U29tZVNlY3JldFZhbHVl"
    decoded: (( base64-decode (grab combined_operations.complex.encoded_ref) ))
    final_value: (( concat "Bearer " combined_operations.complex.decoded ))