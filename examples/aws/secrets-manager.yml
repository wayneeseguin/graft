# AWS Secrets Manager Examples
#
# The awssecret operator retrieves secrets from AWS Secrets Manager

# Basic secret retrieval
api_credentials:
  # Simple string secret
  api_key: (( awssecret "myapp/api-key" ))
  
  # Using ARN instead of name
  api_secret: (( awssecret "arn:aws:secretsmanager:us-east-1:123456789012:secret:myapp/api-secret-AbCdEf" ))

# JSON secret with key extraction
# Assume secret contains: {"username": "dbuser", "password": "dbpass123", "host": "db.example.com", "port": 5432}
database:
  connection:
    username: (( awssecret "myapp/database?key=username" ))
    password: (( awssecret "myapp/database?key=password" ))
    host: (( awssecret "myapp/database?key=host" ))
    port: (( awssecret "myapp/database?key=port" ))
  
  # Build connection string
  url: (( concat "postgresql://" database.connection.username ":" database.connection.password "@" database.connection.host ":" database.connection.port "/myapp" ))

# Version and staging support
versioned_secrets:
  # Get specific version by ID
  specific_version: (( awssecret "myapp/config?version=a1b2c3d4-5678-90ab-cdef-EXAMPLE11111" ))
  
  # Get specific stage (AWSCURRENT is default)
  current: (( awssecret "myapp/rotating-secret?stage=AWSCURRENT" ))
  pending: (( awssecret "myapp/rotating-secret?stage=AWSPENDING" ))
  previous: (( awssecret "myapp/rotating-secret?stage=AWSPREVIOUS" ))

# Combined parameters
rotating_database:
  # Get password from pending stage during rotation
  current_password: (( awssecret "myapp/database/rotating?key=password&stage=AWSCURRENT" ))
  pending_password: (( awssecret "myapp/database/rotating?key=password&stage=AWSPENDING" ))

# Multi-environment secrets
environments:
  development:
    db_creds: (( awssecret "dev/myapp/database" ))
    api_keys: (( awssecret "dev/myapp/api-keys" ))
    
  staging:
    db_creds: (( awssecret "staging/myapp/database" ))
    api_keys: (( awssecret "staging/myapp/api-keys" ))
    
  production:
    db_creds: (( awssecret "prod/myapp/database" ))
    api_keys: (( awssecret "prod/myapp/api-keys" ))

# Dynamic secret paths
meta:
  app: myapp
  env: (( grab $ENVIRONMENT || "dev" ))
  region: (( grab $AWS_REGION || "us-east-1" ))

config:
  # Build path: dev/myapp/config
  app_config: (( awssecret (concat meta.env "/" meta.app "/config") ))
  
  # Extract specific values
  database:
    host: (( awssecret (concat meta.env "/" meta.app "/database?key=host") ))
    password: (( awssecret (concat meta.env "/" meta.app "/database?key=password") ))

# Third-party service credentials
integrations:
  # Payment processing
  stripe:
    public_key: (( awssecret "integrations/stripe?key=public_key" ))
    secret_key: (( awssecret "integrations/stripe?key=secret_key" ))
    webhook_secret: (( awssecret "integrations/stripe?key=webhook_secret" ))
  
  # Email service
  sendgrid:
    api_key: (( awssecret "integrations/sendgrid/api-key" ))
    
  # Cloud providers
  aws:
    access_key_id: (( awssecret "integrations/aws?key=access_key_id" ))
    secret_access_key: (( awssecret "integrations/aws?key=secret_access_key" ))

# SSL/TLS certificates stored as JSON
# Secret contains: {"cert": "-----BEGIN CERTIFICATE-----...", "key": "-----BEGIN PRIVATE KEY-----...", "ca": "-----BEGIN CERTIFICATE-----..."}
tls:
  certificate: (( awssecret "myapp/tls/production?key=cert" ))
  private_key: (( awssecret "myapp/tls/production?key=key" ))
  ca_bundle: (( awssecret "myapp/tls/production?key=ca" ))

# OAuth/OIDC configuration
auth:
  oauth:
    providers:
      github:
        client_id: (( awssecret "oauth/github?key=client_id" ))
        client_secret: (( awssecret "oauth/github?key=client_secret" ))
      google:
        client_id: (( awssecret "oauth/google?key=client_id" ))
        client_secret: (( awssecret "oauth/google?key=client_secret" ))
  
  jwt:
    secret: (( awssecret "auth/jwt-secret" ))
    
  session:
    secret: (( awssecret "auth/session-secret" ))

# Database credentials with automatic rotation
rotated_databases:
  primary:
    # Secrets that are automatically rotated by AWS
    connection: (( awssecret "rds/myapp-primary/connection" ))
    
    # Extract individual components
    endpoint: (( awssecret "rds/myapp-primary/connection?key=endpoint" ))
    username: (( awssecret "rds/myapp-primary/connection?key=username" ))
    password: (( awssecret "rds/myapp-primary/connection?key=password" ))
    
  replica:
    # Read replica credentials
    endpoint: (( awssecret "rds/myapp-replica/connection?key=endpoint" ))
    username: (( awssecret "rds/myapp-replica/connection?key=username" ))
    password: (( awssecret "rds/myapp-replica/connection?key=password" ))

# Error handling with defaults
safe_secrets:
  # Critical secrets (no defaults - will fail if missing)
  critical:
    master_key: (( awssecret "myapp/master-key" ))
    
  # Optional secrets with defaults
  optional:
    feature_flag: (( awssecret "myapp/features/new-ui" || "disabled" ))
    api_timeout: (( awssecret "myapp/config/timeout" || 30 ))

# Cross-region secrets (using ARN)
multi_region:
  # US East 1
  us_east_1:
    api_key: (( awssecret "arn:aws:secretsmanager:us-east-1:123456789012:secret:myapp/api-key-AbCdEf" ))
  
  # EU West 1
  eu_west_1:
    api_key: (( awssecret "arn:aws:secretsmanager:eu-west-1:123456789012:secret:myapp/api-key-GhIjKl" ))

# Best practices example
production_secrets:
  # Use hierarchical naming
  database:
    primary:
      credentials: (( awssecret "prod/myapp/database/primary/credentials" ))
      connection_string: (( awssecret "prod/myapp/database/primary/connection-string" ))
    
    replica:
      credentials: (( awssecret "prod/myapp/database/replica/credentials" ))
      
  # Group by service/component
  services:
    auth:
      jwt_secret: (( awssecret "prod/myapp/services/auth/jwt-secret" ))
      session_key: (( awssecret "prod/myapp/services/auth/session-key" ))
    
    payment:
      api_key: (( awssecret "prod/myapp/services/payment/api-key" ))
      webhook_secret: (( awssecret "prod/myapp/services/payment/webhook-secret" ))
  
  # External integrations
  external:
    datadog:
      api_key: (( awssecret "prod/myapp/external/datadog/api-key" ))
      app_key: (( awssecret "prod/myapp/external/datadog/app-key" ))