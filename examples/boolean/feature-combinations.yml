# Feature Combinations with Boolean Operators
#
# Managing complex feature flag dependencies and combinations

# Feature flag definitions
features:
  # Core features
  core:
    new_ui: true
    dark_mode: true
    responsive_design: true
    offline_mode: false
    
  # User features
  user:
    social_login: true
    two_factor_auth: true
    biometric_auth: false
    passwordless: false
    sso: true
    
  # Communication features
  communication:
    email_notifications: true
    push_notifications: true
    sms_notifications: false
    in_app_messaging: true
    video_calls: false
    
  # Analytics features
  analytics:
    basic_analytics: true
    advanced_analytics: true
    real_time_analytics: false
    export_reports: true
    custom_dashboards: false
    
  # Payment features
  payment:
    credit_cards: true
    paypal: true
    apple_pay: false
    google_pay: false
    crypto: false
    invoicing: true
    
  # AI/ML features
  ai:
    recommendations: true
    auto_tagging: true
    sentiment_analysis: false
    predictive_analytics: false
    nlp_search: true

# User context
user_context:
  plan: "premium"  # free, basic, premium, enterprise
  region: "US"
  beta_tester: true
  early_adopter: false
  account_age_days: 365
  
  # Computed properties
  is_paid: (( user_context.plan != "free" ))
  is_premium_plus: (( user_context.plan == "premium" || user_context.plan == "enterprise" ))
  is_enterprise: (( user_context.plan == "enterprise" ))
  is_established: (( user_context.account_age_days > 90 ))

# Feature dependencies
dependencies:
  # UI dependencies
  ui:
    # Dark mode requires new UI
    dark_mode_available: (( features.core.new_ui && features.core.dark_mode ))
    # Result: true
    
    # Responsive design requires new UI
    responsive_available: (( features.core.new_ui && features.core.responsive_design ))
    # Result: true
    
    # Offline mode requires new UI and responsive design
    offline_available: (( 
      features.core.new_ui && 
      features.core.responsive_design && 
      features.core.offline_mode
    ))
    # Result: false (offline_mode is false)
    
    # Complete UI experience
    full_ui_experience: (( 
      dependencies.ui.dark_mode_available &&
      dependencies.ui.responsive_available &&
      features.core.new_ui
    ))
    # Result: true
  
  # Authentication dependencies
  auth:
    # Biometric requires device support and 2FA
    biometric_available: (( 
      features.user.two_factor_auth && 
      features.user.biometric_auth &&
      user_context.region != "CN"  # Region restriction
    ))
    # Result: false (biometric_auth is false)
    
    # Passwordless requires either biometric or email verification
    passwordless_available: (( 
      features.user.passwordless &&
      (features.user.biometric_auth || features.communication.email_notifications)
    ))
    # Result: false (passwordless is false)
    
    # SSO requires premium plan and proper setup
    sso_available: (( 
      features.user.sso &&
      user_context.is_premium_plus
    ))
    # Result: true
    
    # Enhanced security bundle
    enhanced_security: (( 
      features.user.two_factor_auth &&
      (features.user.biometric_auth || features.user.sso) &&
      user_context.is_paid
    ))
    # Result: true (2FA and SSO)
  
  # Communication dependencies
  communication:
    # Push notifications require user consent and app support
    push_enabled: (( 
      features.communication.push_notifications &&
      features.core.new_ui  # New UI has push support
    ))
    # Result: true
    
    # SMS requires phone verification and regional support
    sms_enabled: (( 
      features.communication.sms_notifications &&
      (user_context.region == "US" || user_context.region == "CA" || user_context.region == "UK")
    ))
    # Result: false (sms_notifications is false)
    
    # Video calls require premium and stable connection
    video_enabled: (( 
      features.communication.video_calls &&
      user_context.is_premium_plus &&
      features.communication.in_app_messaging  # Requires messaging infrastructure
    ))
    # Result: false (video_calls is false)
    
    # Multi-channel communication
    multi_channel: (( 
      (features.communication.email_notifications ? 1 : 0) +
      (dependencies.communication.push_enabled ? 1 : 0) +
      (dependencies.communication.sms_enabled ? 1 : 0) +
      (features.communication.in_app_messaging ? 1 : 0)
    ) >= 2)
    # Result: true (email, push, and in-app)
  
  # Analytics dependencies
  analytics:
    # Advanced analytics requires basic analytics
    advanced_available: (( 
      features.analytics.basic_analytics && 
      features.analytics.advanced_analytics &&
      user_context.is_paid
    ))
    # Result: true
    
    # Real-time requires advanced analytics and premium
    realtime_available: (( 
      dependencies.analytics.advanced_available &&
      features.analytics.real_time_analytics &&
      user_context.is_premium_plus
    ))
    # Result: false (real_time_analytics is false)
    
    # Export requires any analytics
    export_available: (( 
      features.analytics.export_reports &&
      (features.analytics.basic_analytics || features.analytics.advanced_analytics)
    ))
    # Result: true
    
    # Custom dashboards require advanced analytics
    custom_dashboards_available: (( 
      dependencies.analytics.advanced_available &&
      features.analytics.custom_dashboards &&
      user_context.is_premium_plus
    ))
    # Result: false (custom_dashboards is false)
    
    # Full analytics suite
    full_analytics: (( 
      dependencies.analytics.advanced_available &&
      dependencies.analytics.export_available &&
      user_context.is_premium_plus
    ))
    # Result: true
  
  # Payment dependencies
  payment:
    # Digital wallets require base payment support
    apple_pay_available: (( 
      features.payment.credit_cards &&
      features.payment.apple_pay &&
      (user_context.region == "US" || user_context.region == "UK")
    ))
    # Result: false (apple_pay is false)
    
    google_pay_available: (( 
      features.payment.credit_cards &&
      features.payment.google_pay
    ))
    # Result: false (google_pay is false)
    
    # Crypto requires KYC and premium account
    crypto_available: (( 
      features.payment.crypto &&
      user_context.is_premium_plus &&
      user_context.is_established &&
      user_context.region != "CN"
    ))
    # Result: false (crypto is false)
    
    # Invoicing requires business features
    invoicing_available: (( 
      features.payment.invoicing &&
      user_context.is_paid
    ))
    # Result: true
    
    # Multiple payment methods
    payment_options_count: (( 
      (features.payment.credit_cards ? 1 : 0) +
      (features.payment.paypal ? 1 : 0) +
      (dependencies.payment.apple_pay_available ? 1 : 0) +
      (dependencies.payment.google_pay_available ? 1 : 0) +
      (dependencies.payment.crypto_available ? 1 : 0) +
      (dependencies.payment.invoicing_available ? 1 : 0)
    ))
    # Result: 3 (credit cards, paypal, invoicing)
    
    has_multiple_options: (( dependencies.payment.payment_options_count >= 2 ))
    # Result: true
  
  # AI/ML dependencies
  ai:
    # All AI features require basic analytics for data
    base_requirement: (( features.analytics.basic_analytics ))
    # Result: true
    
    # Recommendations require user history
    recommendations_available: (( 
      dependencies.ai.base_requirement &&
      features.ai.recommendations &&
      user_context.is_established
    ))
    # Result: true
    
    # Auto-tagging requires recommendations
    auto_tagging_available: (( 
      dependencies.ai.recommendations_available &&
      features.ai.auto_tagging
    ))
    # Result: true
    
    # Sentiment analysis requires premium and NLP
    sentiment_available: (( 
      dependencies.ai.base_requirement &&
      features.ai.sentiment_analysis &&
      features.ai.nlp_search &&
      user_context.is_premium_plus
    ))
    # Result: false (sentiment_analysis is false)
    
    # Predictive requires all other AI features
    predictive_available: (( 
      dependencies.ai.recommendations_available &&
      dependencies.ai.auto_tagging_available &&
      features.ai.predictive_analytics &&
      user_context.is_enterprise
    ))
    # Result: false (predictive_analytics is false)
    
    # AI feature score
    ai_maturity: (( 
      (dependencies.ai.recommendations_available ? 20 : 0) +
      (dependencies.ai.auto_tagging_available ? 20 : 0) +
      (dependencies.ai.sentiment_available ? 20 : 0) +
      (dependencies.ai.predictive_available ? 20 : 0) +
      (features.ai.nlp_search ? 20 : 0)
    ))
    # Result: 60 (recommendations, auto-tagging, nlp_search)

# Feature bundles
bundles:
  # Starter bundle (free users)
  starter:
    available: true
    includes:
      basic_ui: (( features.core.new_ui ))
      email_notifications: (( features.communication.email_notifications ))
      basic_analytics: (( features.analytics.basic_analytics ))
      social_login: (( features.user.social_login ))
    
    all_included: (( 
      bundles.starter.includes.basic_ui &&
      bundles.starter.includes.email_notifications &&
      bundles.starter.includes.basic_analytics &&
      bundles.starter.includes.social_login
    ))
    # Result: true
  
  # Professional bundle
  professional:
    available: (( user_context.is_paid ))
    # Result: true
    
    includes:
      everything_in_starter: (( bundles.starter.all_included ))
      advanced_ui: (( dependencies.ui.full_ui_experience ))
      multi_channel_comms: (( dependencies.communication.multi_channel ))
      advanced_analytics: (( dependencies.analytics.advanced_available ))
      two_factor_auth: (( features.user.two_factor_auth ))
      payment_processing: (( features.payment.credit_cards && features.payment.paypal ))
    
    all_included: (( 
      bundles.professional.available &&
      bundles.professional.includes.everything_in_starter &&
      bundles.professional.includes.advanced_ui &&
      bundles.professional.includes.multi_channel_comms &&
      bundles.professional.includes.advanced_analytics &&
      bundles.professional.includes.two_factor_auth &&
      bundles.professional.includes.payment_processing
    ))
    # Result: true
  
  # Enterprise bundle
  enterprise:
    available: (( user_context.is_enterprise ))
    # Result: false
    
    includes:
      everything_in_professional: (( bundles.professional.all_included ))
      sso: (( dependencies.auth.sso_available ))
      full_analytics: (( dependencies.analytics.full_analytics ))
      ai_features: (( dependencies.ai.ai_maturity >= 40 ))
      priority_support: true
      sla_guarantee: true
    
    all_included: (( 
      bundles.enterprise.available &&
      bundles.enterprise.includes.everything_in_professional &&
      bundles.enterprise.includes.sso &&
      bundles.enterprise.includes.full_analytics &&
      bundles.enterprise.includes.ai_features
    ))
    # Result: false (not enterprise user)

# Feature compatibility matrix
compatibility:
  # UI compatibility
  ui_modes:
    # Can't have offline mode without responsive design
    offline_responsive: (( 
      !features.core.offline_mode || 
      features.core.responsive_design
    ))
    # Result: true
    
    # Dark mode requires proper UI framework
    dark_mode_compatible: (( 
      !features.core.dark_mode ||
      features.core.new_ui
    ))
    # Result: true
  
  # Auth compatibility
  auth_modes:
    # Can't have passwordless without alternative auth
    passwordless_has_alternative: (( 
      !features.user.passwordless ||
      features.user.biometric_auth ||
      features.user.social_login ||
      features.user.sso
    ))
    # Result: true (passwordless is false)
    
    # SSO conflicts with social login in current implementation
    sso_social_conflict: (( 
      !(features.user.sso && features.user.social_login) ||
      user_context.is_enterprise  # Enterprise can have both
    ))
    # Result: false (both are true but not enterprise)
  
  # Payment compatibility
  payment_modes:
    # Crypto requires other payment method as backup
    crypto_has_backup: (( 
      !features.payment.crypto ||
      features.payment.credit_cards ||
      features.payment.paypal
    ))
    # Result: true
    
    # Digital wallets require card processing
    wallets_require_cards: (( 
      (!features.payment.apple_pay && !features.payment.google_pay) ||
      features.payment.credit_cards
    ))
    # Result: true
  
  # Overall compatibility
  is_compatible: (( 
    compatibility.ui_modes.offline_responsive &&
    compatibility.ui_modes.dark_mode_compatible &&
    compatibility.auth_modes.passwordless_has_alternative &&
    compatibility.auth_modes.sso_social_conflict &&
    compatibility.payment_modes.crypto_has_backup &&
    compatibility.payment_modes.wallets_require_cards
  ))
  # Result: false (SSO/social conflict)

# Beta features
beta_features:
  # Beta eligibility
  eligible: (( 
    user_context.beta_tester ||
    user_context.early_adopter ||
    (user_context.is_premium_plus && user_context.is_established)
  ))
  # Result: true (beta_tester)
  
  # Available beta features
  available:
    ai_predictions: (( 
      beta_features.eligible &&
      dependencies.ai.ai_maturity >= 60 &&
      !features.ai.predictive_analytics  # Not yet GA
    ))
    # Result: true
    
    offline_mode: (( 
      beta_features.eligible &&
      dependencies.ui.responsive_available &&
      !features.core.offline_mode  # Not yet GA
    ))
    # Result: true
    
    video_calls: (( 
      beta_features.eligible &&
      user_context.is_premium_plus &&
      features.communication.in_app_messaging &&
      !features.communication.video_calls  # Not yet GA
    ))
    # Result: true
    
    advanced_biometrics: (( 
      beta_features.eligible &&
      features.user.two_factor_auth &&
      !features.user.biometric_auth  # Not yet GA
    ))
    # Result: true
  
  # Beta feature count
  beta_count: (( 
    (beta_features.available.ai_predictions ? 1 : 0) +
    (beta_features.available.offline_mode ? 1 : 0) +
    (beta_features.available.video_calls ? 1 : 0) +
    (beta_features.available.advanced_biometrics ? 1 : 0)
  ))
  # Result: 4

# Feature recommendations
recommendations:
  # Based on user context and current features
  user_needs:
    # High-security user (has 2FA, premium)
    security_focused: (( 
      features.user.two_factor_auth &&
      user_context.is_premium_plus
    ))
    # Result: true
    
    # Power user (established, uses many features)
    power_user: (( 
      user_context.is_established &&
      dependencies.analytics.advanced_available &&
      dependencies.ai.ai_maturity >= 40
    ))
    # Result: true
    
    # Mobile user (uses push, wants offline)
    mobile_focused: (( 
      dependencies.communication.push_enabled &&
      features.core.responsive_design
    ))
    # Result: true
  
  # Recommended upgrades
  suggested_features:
    # Security recommendations
    biometric_auth: (( 
      recommendations.user_needs.security_focused &&
      !features.user.biometric_auth &&
      beta_features.available.advanced_biometrics
    ))
    # Result: true
    
    # Power user recommendations
    custom_dashboards: (( 
      recommendations.user_needs.power_user &&
      !features.analytics.custom_dashboards &&
      user_context.is_premium_plus
    ))
    # Result: true
    
    # Mobile recommendations
    offline_mode: (( 
      recommendations.user_needs.mobile_focused &&
      !features.core.offline_mode &&
      beta_features.available.offline_mode
    ))
    # Result: true
    
    # Payment recommendations
    digital_wallets: (( 
      features.payment.credit_cards &&
      dependencies.payment.payment_options_count < 4 &&
      (!features.payment.apple_pay || !features.payment.google_pay)
    ))
    # Result: true
  
  # Priority order
  top_recommendations:
    - (( recommendations.suggested_features.biometric_auth ? "Enable biometric authentication (Beta)" : ~ ))
    - (( recommendations.suggested_features.offline_mode ? "Try offline mode (Beta)" : ~ ))
    - (( recommendations.suggested_features.custom_dashboards ? "Upgrade for custom dashboards" : ~ ))
    - (( recommendations.suggested_features.digital_wallets ? "Add digital wallet support" : ~ ))

# Feature health check
health_check:
  # Configuration issues
  issues:
    sso_social_conflict: (( !compatibility.auth_modes.sso_social_conflict ))
    # Result: true (conflict exists)
    
    missing_dependencies: (( 
      (features.core.dark_mode && !features.core.new_ui) ||
      (features.analytics.advanced_analytics && !features.analytics.basic_analytics) ||
      (features.ai.auto_tagging && !features.ai.recommendations)
    ))
    # Result: false
    
    plan_feature_mismatch: (( 
      (!user_context.is_paid && dependencies.analytics.advanced_available) ||
      (!user_context.is_premium_plus && dependencies.auth.sso_available) ||
      (!user_context.is_enterprise && bundles.enterprise.all_included)
    ))
    # Result: false
  
  # Overall health
  status: (( 
    health_check.issues.sso_social_conflict || 
    health_check.issues.missing_dependencies ||
    health_check.issues.plan_feature_mismatch ? "issues_found" : "healthy"
  ))
  # Result: "issues_found"
  
  # Issue count
  issue_count: (( 
    (health_check.issues.sso_social_conflict ? 1 : 0) +
    (health_check.issues.missing_dependencies ? 1 : 0) +
    (health_check.issues.plan_feature_mismatch ? 1 : 0)
  ))
  # Result: 1

# Feature activation summary
activation_summary:
  # Core metrics
  core_features_active: (( 
    (features.core.new_ui ? 1 : 0) +
    (features.core.dark_mode ? 1 : 0) +
    (features.core.responsive_design ? 1 : 0) +
    (features.core.offline_mode ? 1 : 0)
  ))
  # Result: 3
  
  total_features_available: (( 
    (dependencies.ui.dark_mode_available ? 1 : 0) +
    (dependencies.ui.responsive_available ? 1 : 0) +
    (dependencies.auth.enhanced_security ? 1 : 0) +
    (dependencies.communication.multi_channel ? 1 : 0) +
    (dependencies.analytics.full_analytics ? 1 : 0) +
    (dependencies.payment.has_multiple_options ? 1 : 0) +
    (dependencies.ai.ai_maturity > 0 ? 1 : 0)
  ))
  # Result: 7
  
  beta_features_active: (( beta_features.beta_count ))
  # Result: 4
  
  # User satisfaction score (simplified)
  satisfaction_score: (( 
    activation_summary.total_features_available * 10 +
    activation_summary.beta_features_active * 5 +
    (bundles.professional.all_included ? 20 : 0) +
    (health_check.status == "healthy" ? 10 : 0)
  ))
  # Result: 90 (70 + 20 + 20 + 0)