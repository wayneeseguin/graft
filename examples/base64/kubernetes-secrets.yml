---
# Creating Kubernetes secrets with base64 encoding
# Kubernetes requires all secret data to be base64 encoded

# Application credentials
app:
  database:
    host: postgres.default.svc.cluster.local
    port: 5432
    name: myapp
    username: appuser
    password: "s3cr3t-p@ssw0rd!"
  
  redis:
    host: redis.default.svc.cluster.local
    port: 6379
    password: "r3d1s-p@ss"

# Kubernetes Secret for database
database_secret:
  apiVersion: v1
  kind: Secret
  metadata:
    name: database-credentials
    namespace: default
  type: Opaque
  data:
    # All values must be base64 encoded
    host: (( base64 (grab app.database.host) ))
    port: (( base64 (concat (grab app.database.port)) ))  # Convert number to string
    database: (( base64 (grab app.database.name) ))
    username: (( base64 (grab app.database.username) ))
    password: (( base64 (grab app.database.password) ))
    
    # Connection string for convenience
    connection_string: (( base64 (concat 
      "postgresql://"
      (grab app.database.username) ":"
      (grab app.database.password) "@"
      (grab app.database.host) ":"
      (grab app.database.port) "/"
      (grab app.database.name)
    )))

# Kubernetes Secret for Redis
redis_secret:
  apiVersion: v1
  kind: Secret
  metadata:
    name: redis-credentials
    namespace: default
  type: Opaque
  data:
    host: (( base64 (grab app.redis.host) ))
    port: (( base64 (concat (grab app.redis.port)) ))
    password: (( base64 (grab app.redis.password) ))
    
    # Redis URL format
    url: (( base64 (concat 
      "redis://:"
      (grab app.redis.password) "@"
      (grab app.redis.host) ":"
      (grab app.redis.port)
    )))

# TLS Certificate Secret
tls_secret:
  apiVersion: v1
  kind: Secret
  metadata:
    name: tls-certificate
    namespace: default
  type: kubernetes.io/tls
  data:
    # In real usage, these would come from files or vault
    tls.crt: (( base64 "-----BEGIN CERTIFICATE-----\nMIIDXTCCAkWgAwIBAgIJAKl...\n-----END CERTIFICATE-----" ))
    tls.key: (( base64 "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0B...\n-----END PRIVATE KEY-----" ))

# Docker Registry Secret
registry_secret:
  apiVersion: v1
  kind: Secret
  metadata:
    name: docker-registry
    namespace: default
  type: kubernetes.io/dockerconfigjson
  data:
    # Docker config must be base64 encoded JSON
    .dockerconfigjson: (( base64 (concat 
      "{\"auths\": {"
      "\"docker.io\": {"
      "\"username\": \"" (grab app.docker_username || "myuser") "\", "
      "\"password\": \"" (grab app.docker_password || "mypass") "\", "
      "\"auth\": \"" (base64 (concat (grab app.docker_username || "myuser") ":" (grab app.docker_password || "mypass"))) "\""
      "}}}"
    )))

# Generic configuration secret
config_secret:
  apiVersion: v1
  kind: Secret
  metadata:
    name: app-config
    namespace: default
  type: Opaque
  data:
    # Config files as base64
    application.yml: (( base64 (concat 
      "server:\n"
      "  port: 8080\n"
      "database:\n"
      "  host: " (grab app.database.host) "\n"
      "  name: " (grab app.database.name) "\n"
    )))
    
    # Environment file
    .env: (( base64 (concat 
      "DB_HOST=" (grab app.database.host) "\n"
      "DB_USER=" (grab app.database.username) "\n"
      "DB_PASS=" (grab app.database.password) "\n"
      "REDIS_HOST=" (grab app.redis.host) "\n"
      "REDIS_PASS=" (grab app.redis.password) "\n"
    )))