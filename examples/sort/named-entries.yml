# Sorting Named Entry Arrays
#
# Sorting arrays of maps/objects by specified keys

# Default sorting by 'name' key
default_sort:
  # Services list - will sort by 'name' automatically
  services:
    - name: database
      port: 5432
      priority: 1
    - name: cache
      port: 6379
      priority: 3
    - name: web
      port: 8080
      priority: 2
    - name: api
      port: 8081
      priority: 2
  
  sorted_services: (( sort ))
  # Result: Sorted alphabetically by name: api, cache, database, web

# Sorting by custom keys
custom_key_sort:
  # Sort by 'id' instead of name
  items:
    - id: "item-003"
      name: "Third Item"
      value: 300
    - id: "item-001"
      name: "First Item"
      value: 100
    - id: "item-004"
      name: "Fourth Item"
      value: 400
    - id: "item-002"
      name: "Second Item"
      value: 200
  
  sorted_by_id: (( sort by id ))
  # Result: Sorted by id: item-001, item-002, item-003, item-004
  
  # Sort by numeric value
  sorted_by_value: (( sort by value ))
  # Result: Sorted by value: 100, 200, 300, 400

# User management example
users:
  # User list with various attributes
  list:
    - name: charlie
      email: charlie@example.com
      role: admin
      created: "2023-01-15"
      last_login: "2024-01-14"
    - name: alice
      email: alice@example.com
      role: user
      created: "2023-03-20"
      last_login: "2024-01-15"
    - name: bob
      email: bob@example.com
      role: moderator
      created: "2023-02-10"
      last_login: "2024-01-13"
    - name: david
      email: david@example.com
      role: user
      created: "2023-04-05"
      last_login: "2024-01-10"
  
  # Different sort orders
  by_name: (( sort ))                    # Default: alice, bob, charlie, david
  by_email: (( sort by email ))          # Sort by email address
  by_role: (( sort by role ))            # Sort by role: admin, moderator, user, user
  by_created: (( sort by created ))      # Sort by creation date
  by_last_login: (( sort by last_login )) # Sort by last login

# Server inventory
servers:
  inventory:
    - name: prod-web-01
      ip: "10.0.1.10"
      cpu: 8
      memory: 32
      datacenter: "us-east-1"
    - name: prod-db-01
      ip: "10.0.2.10"
      cpu: 16
      memory: 64
      datacenter: "us-east-1"
    - name: prod-cache-01
      ip: "10.0.3.10"
      cpu: 4
      memory: 16
      datacenter: "us-west-2"
    - name: prod-app-01
      ip: "10.0.1.20"
      cpu: 8
      memory: 32
      datacenter: "us-east-1"
  
  # Sort by different attributes
  by_name: (( sort ))                      # Alphabetical by server name
  by_ip: (( sort by ip ))                  # Sort by IP address (string sort)
  by_cpu: (( sort by cpu ))                # Sort by CPU count
  by_memory: (( sort by memory ))          # Sort by memory size
  by_datacenter: (( sort by datacenter ))  # Group by datacenter

# Application configurations
applications:
  configs:
    - name: frontend
      version: "2.1.0"
      replicas: 5
      memory: "512Mi"
      port: 3000
    - name: backend
      version: "3.0.1"
      replicas: 3
      memory: "1Gi"
      port: 8080
    - name: worker
      version: "1.5.2"
      replicas: 2
      memory: "2Gi"
      port: 9090
    - name: scheduler
      version: "1.0.0"
      replicas: 1
      memory: "256Mi"
      port: 8090
  
  # Various sort orders
  sorted_by_name: (( sort ))
  sorted_by_version: (( sort by version ))
  sorted_by_replicas: (( sort by replicas ))
  sorted_by_port: (( sort by port ))

# Cloud resources
cloud_resources:
  instances:
    - name: "web-instance-1"
      type: "t3.medium"
      cost: 0.0416
      region: "us-east-1"
    - name: "db-instance-1"
      type: "r5.large"
      cost: 0.126
      region: "us-east-1"
    - name: "cache-instance-1"
      type: "t3.small"
      cost: 0.0208
      region: "us-west-2"
    - name: "app-instance-1"
      type: "t3.large"
      cost: 0.0832
      region: "us-east-1"
  
  # Sort by different criteria
  by_name: (( sort ))
  by_type: (( sort by type ))
  by_cost: (( sort by cost ))      # Numeric sort
  by_region: (( sort by region ))

# Task priority queue
tasks:
  queue:
    - name: "backup-database"
      priority: 1
      scheduled: "2024-01-15T02:00:00Z"
      duration: 3600
    - name: "update-cache"
      priority: 3
      scheduled: "2024-01-15T00:00:00Z"
      duration: 300
    - name: "generate-reports"
      priority: 2
      scheduled: "2024-01-15T06:00:00Z"
      duration: 1800
    - name: "cleanup-logs"
      priority: 4
      scheduled: "2024-01-15T03:00:00Z"
      duration: 600
  
  # Sort by execution order
  by_priority: (( sort by priority ))      # Highest priority first (1, 2, 3, 4)
  by_scheduled: (( sort by scheduled ))    # Chronological order
  by_duration: (( sort by duration ))      # Shortest to longest

# API endpoints
api_endpoints:
  routes:
    - name: "users"
      path: "/api/v1/users"
      method: "GET"
      rate_limit: 1000
    - name: "auth"
      path: "/api/v1/auth"
      method: "POST"
      rate_limit: 100
    - name: "products"
      path: "/api/v1/products"
      method: "GET"
      rate_limit: 5000
    - name: "orders"
      path: "/api/v1/orders"
      method: "POST"
      rate_limit: 500
  
  # Different sort strategies
  by_name: (( sort ))
  by_path: (( sort by path ))
  by_method: (( sort by method ))
  by_rate_limit: (( sort by rate_limit ))

# Complex nested sorting
departments:
  list:
    - name: "Engineering"
      id: "dept-003"
      employees: 50
      budget: 5000000
      manager:
        name: "Alice Johnson"
        id: "emp-001"
    - name: "Sales"
      id: "dept-001"
      employees: 30
      budget: 3000000
      manager:
        name: "Bob Smith"
        id: "emp-002"
    - name: "Marketing"
      id: "dept-002"
      employees: 20
      budget: 2000000
      manager:
        name: "Charlie Brown"
        id: "emp-003"
    - name: "HR"
      id: "dept-004"
      employees: 10
      budget: 1000000
      manager:
        name: "David Lee"
        id: "emp-004"
  
  # Various sort orders
  by_name: (( sort ))                    # Alphabetical
  by_id: (( sort by id ))               # By department ID
  by_size: (( sort by employees ))      # By number of employees
  by_budget: (( sort by budget ))       # By budget size