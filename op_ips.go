package spruce

import (
	"fmt"
	"net"

	"github.com/ziutek/utils/netaddr"

	"github.com/starkandwayne/goutils/tree"

	. "github.com/geofffranks/spruce/log"
)

// IpOperator...
type IpsOperator struct{}

// Setup ...
func (IpsOperator) Setup() error {
	return nil
}

// Phase ...
func (IpsOperator) Phase() OperatorPhase {
	return EvalPhase
}

// Dependencies ...
func (IpsOperator) Dependencies(ev *Evaluator, args []*Expr, locs []*tree.Cursor, auto []*tree.Cursor) []*tree.Cursor {
	l := []*tree.Cursor{}

	for _, arg := range args {
		if arg.Type == Reference {
			for _, other := range locs {
				if other.Under(arg.Reference) {
					l = append(l, other)
				}
			}
		} else if arg.Type == OperatorCall {
			// Get dependencies from nested operator
			nestedOp := OperatorFor(arg.Op())
			if _, ok := nestedOp.(NullOperator); !ok {
				nestedDeps := nestedOp.Dependencies(ev, arg.Args(), locs, auto)
				l = append(l, nestedDeps...)
			}
		}
	}

	//append autogenerated dependencies (operator reference-type arguments)
	for _, dep := range auto {
		l = append(l, dep)
	}

	return l
}

func makeInt(val interface{}) int {
	var num int;

	num, ok := val.(int)
	if !ok {
	  num = int(val.(int64))
	}
	return num
}

func netSize(ipnet *net.IPNet) int {
	ones, bits := ipnet.Mask.Size()
	return 1<<uint(bits-ones)
}

func abs(n int) int {
	if n < 0 {
		return -n
	}
	return n
}

// Run ...
func (IpsOperator) Run(ev *Evaluator, args []*Expr) (*Response, error) {
	DEBUG("running (( ips ... )) operation at $.%s", ev.Here)
	defer DEBUG("done with (( ips ... )) operation at $%s\n", ev.Here)

	if (len(args) < 2) {
		return nil, fmt.Errorf("ips requires at least two arguments: 1) An IP or a CIDR and 2) an index")
	}

	var vals []interface{}

	for i, arg := range args {
		// Use ResolveOperatorArgument to support nested expressions
		val, err := ResolveOperatorArgument(ev, arg)
		if err != nil {
			DEBUG("     [%d]: resolution failed\n    error: %s", i, err)
			return nil, err
		}

		if val == nil {
			DEBUG("  arg[%d]: resolved to nil", i)
			return nil, fmt.Errorf("ips operator argument cannot be nil")
		}

		DEBUG("  arg[%d]: resolved to value (type: %T)", i, val)
		vals = append(vals, val)
		DEBUG("")
	}

	// Convert first argument to string (IP or CIDR)
	ipStr := fmt.Sprintf("%v", vals[0])
	
	ip, ipnet, err := net.ParseCIDR(ipStr)
	if err != nil {
		ip = net.ParseIP(ipStr)
		if ip == nil {
			DEBUG("     [0]: failed to parse IP or CIDR \"%s\": %s", ipStr, err)
			return nil, fmt.Errorf("first argument must be a valid IP or CIDR: %s", ipStr)
		}
	}

	start := makeInt(vals[1])

	if ipnet != nil {
		ip = ip.Mask(ipnet.Mask)
		netsize := netSize(ipnet)

		if abs(start) > netsize {
			return nil, fmt.Errorf("Start index %d exceeds size of subnet %s", start, vals[0])
		}
		if start < 0 {
			start += netsize
		}
	}



	if len(args) == 2 {
		return &Response{
			Type:  Replace,
			Value: netaddr.IPAdd(ip, start).String(),
		}, nil
	} else {
		count := makeInt(vals[2])
		if ipnet != nil {
			if start + count > netSize(ipnet) {
			  return nil, fmt.Errorf("Start index %d and count %d would exceed size of subnet %s", start, count, vals[0])
			}
		}
		lst := []interface{}{}
		for i := start; i < start + count; i++ {
			lst = append(lst, netaddr.IPAdd(ip, i).String())
		}
		return &Response{
			Type:  Replace,
			Value: lst,
		}, nil
	}
}

func init() {
	RegisterOp("ips", IpsOperator{})
}
