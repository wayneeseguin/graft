#!/usr/bin/env perl

use strict;
use warnings;
use File::Basename;
use File::Path qw(make_path remove_tree);
use Cwd qw(getcwd abs_path);
use Digest::SHA qw(sha256_hex);

# ANSI color codes
my $RED = "\033[0;31m";
my $GREEN = "\033[0;32m";
my $YELLOW = "\033[1;33m";
my $NC = "\033[0m"; # No Color

# Get script directory and project root
my $script_dir = dirname(abs_path($0));
my $project_root = dirname($script_dir);

# Check if we're in the project root
unless (-f "$project_root/go.mod") {
    die "${RED}Error: go.mod not found. Please run this script from the project root.${NC}\n";
}

# Get version from argument or git tag
my $version;
if (@ARGV == 1) {
    $version = $ARGV[0];
} else {
    # Try to get version from current tag
    $version = `git describe --tags --exact-match 2>/dev/null`;
    chomp $version;
    if (!$version) {
        die "${RED}Error: No version specified and no git tag found.${NC}\n" .
            "Usage: $0 <version>\n" .
            "Example: $0 v0.1.0\n";
    }
}

# Ensure version starts with 'v'
$version = "v$version" unless $version =~ /^v/;

print "${GREEN}Building graft release $version${NC}\n";

# Create releases directory
my $release_dir = "$project_root/releases";
remove_tree($release_dir) if -d $release_dir;
make_path($release_dir) or die "Failed to create $release_dir: $!\n";

# Platforms to build for
my @platforms = (
    { goos => 'linux',  goarch => 'amd64' },
    { goos => 'linux',  goarch => 'arm64' },
    { goos => 'darwin', goarch => 'amd64' },
    { goos => 'darwin', goarch => 'arm64' },
);

# Save current directory
my $orig_dir = getcwd();

# Build for each platform
foreach my $platform (@platforms) {
    my $goos = $platform->{goos};
    my $goarch = $platform->{goarch};
    
    print "${YELLOW}Building for $goos/$goarch...${NC}\n";
    
    my $output_name = "graft-${version}-${goos}-${goarch}";
    
    # Build the binary
    $ENV{GOOS} = $goos;
    $ENV{GOARCH} = $goarch;
    $ENV{CGO_ENABLED} = '0';
    
    my $build_cmd = "go build -ldflags \"-X main.Version=${version}\" " .
                    "-o \"$release_dir/$output_name\" ./cmd/graft";
    
    system($build_cmd) == 0 or die "Build failed for $goos/$goarch: $!\n";
    
    # Create tar.gz archive
    print "  Creating archive...\n";
    chdir($release_dir) or die "Cannot chdir to $release_dir: $!\n";
    
    my $tar_cmd = "tar -czf \"${output_name}.tar.gz\" \"$output_name\"";
    system($tar_cmd) == 0 or die "Failed to create archive: $!\n";
    
    # Generate checksum
    print "  Generating checksum...\n";
    
    # Try sha256sum first, fall back to shasum for macOS
    my $sha_cmd;
    if (system("which sha256sum >/dev/null 2>&1") == 0) {
        $sha_cmd = "sha256sum \"${output_name}.tar.gz\" > \"${output_name}.tar.gz.sha256\"";
    } else {
        $sha_cmd = "shasum -a 256 \"${output_name}.tar.gz\" > \"${output_name}.tar.gz.sha256\"";
    }
    
    system($sha_cmd) == 0 or die "Failed to generate checksum: $!\n";
    
    # Remove the uncompressed binary
    unlink("$output_name") or warn "Failed to remove $output_name: $!\n";
    
    chdir($orig_dir) or die "Cannot chdir back to $orig_dir: $!\n";
    
    print "${GREEN}  âœ“ Built ${output_name}.tar.gz${NC}\n";
}

print "\n${GREEN}Release artifacts created in $release_dir:${NC}\n";
system("ls -la \"$release_dir\"");

print "\n${GREEN}Build complete!${NC}\n";
print "To create a GitHub release, push the tag:\n";
print "  ${YELLOW}git tag -a $version -m \"Release $version\"${NC}\n";
print "  ${YELLOW}git push origin $version${NC}\n";