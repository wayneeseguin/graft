#!/usr/bin/env bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Check if we're in the project root
if [[ ! -f "$PROJECT_ROOT/go.mod" ]]; then
    echo -e "${RED}Error: go.mod not found. Please run this script from the project root.${NC}"
    exit 1
fi

# Get version from argument or git tag
if [[ $# -eq 1 ]]; then
    VERSION="$1"
else
    # Try to get version from current tag
    VERSION=$(git describe --tags --exact-match 2>/dev/null || echo "")
    if [[ -z "$VERSION" ]]; then
        echo -e "${RED}Error: No version specified and no git tag found.${NC}"
        echo "Usage: $0 <version>"
        echo "Example: $0 v0.1.0"
        exit 1
    fi
fi

# Ensure version starts with 'v'
if [[ ! "$VERSION" =~ ^v ]]; then
    VERSION="v$VERSION"
fi

echo -e "${GREEN}Building graft release $VERSION${NC}"

# Create releases directory
RELEASE_DIR="$PROJECT_ROOT/releases"
rm -rf "$RELEASE_DIR"
mkdir -p "$RELEASE_DIR"

# Platforms to build for
PLATFORMS=(
    "linux/amd64"
    "linux/arm64"
    "darwin/amd64"
    "darwin/arm64"
)

# Build for each platform
for platform in "${PLATFORMS[@]}"; do
    IFS='/' read -r goos goarch <<< "$platform"
    
    echo -e "${YELLOW}Building for $goos/$goarch...${NC}"
    
    output_name="graft-${VERSION}-${goos}-${goarch}"
    
    # Build the binary
    GOOS=$goos GOARCH=$goarch CGO_ENABLED=0 go build \
        -ldflags "-X main.Version=${VERSION}" \
        -o "$RELEASE_DIR/$output_name" \
        ./cmd/graft
    
    # Create tar.gz archive
    echo -e "  Creating archive..."
    cd "$RELEASE_DIR"
    tar -czf "${output_name}.tar.gz" "$output_name"
    
    # Generate checksum
    echo -e "  Generating checksum..."
    if command -v sha256sum >/dev/null 2>&1; then
        sha256sum "${output_name}.tar.gz" > "${output_name}.tar.gz.sha256"
    else
        # macOS fallback
        shasum -a 256 "${output_name}.tar.gz" > "${output_name}.tar.gz.sha256"
    fi
    
    # Remove the uncompressed binary
    rm "$output_name"
    
    cd "$PROJECT_ROOT"
    
    echo -e "${GREEN}  âœ“ Built ${output_name}.tar.gz${NC}"
done

echo -e "\n${GREEN}Release artifacts created in $RELEASE_DIR:${NC}"
ls -la "$RELEASE_DIR"

echo -e "\n${GREEN}Build complete!${NC}"
echo -e "To create a GitHub release, push the tag:"
echo -e "  ${YELLOW}git tag -a $VERSION -m \"Release $VERSION\"${NC}"
echo -e "  ${YELLOW}git push origin $VERSION${NC}"